"""
Django settings for taskfy project.

Generated by 'django-admin startproject' using Django 5.2.3.
"""

from pathlib import Path
import os
from datetime import timedelta

# === Caminhos base ===
BASE_DIR = Path(__file__).resolve().parent.parent

# === Segurança / Debug ===
SECRET_KEY = 'django-insecure-ek1fnjxzic4aol1_+hqh)bb2xbpduj*dhlp@%^=xcbgh#qs&$t'
DEBUG = True
ALLOWED_HOSTS = ['*']

# === Apps instalados ===
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'jobcards',

    'rest_framework',
    'corsheaders',

    # Mantido porque já estava no projeto (não interfere no Celery)
    'django_rq',
]

# ================================================= Use DBs diferentes no mesmo Redis:
#   /1 para cache   |   /0 para filas RQ
REDIS_URL_CACHE = os.environ.get("REDIS_URL_CACHE", "redis://127.0.0.1:6379/1")
REDIS_URL_RQ    = os.environ.get("REDIS_URL_RQ",    "redis://127.0.0.1:6379/0")

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL_CACHE,
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
        "TIMEOUT": 60 * 60 * 6,  # 6h
        "KEY_PREFIX": "jobcards",
    }
}

# Fila RQ
RQ_QUEUES = {
    "default": {"URL": REDIS_URL_RQ, "DEFAULT_TIMEOUT": 3600},
    "pdf":     {"URL": REDIS_URL_RQ, "DEFAULT_TIMEOUT": 3600},
}

# =================================================#

# === Middleware ===
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    'corsheaders.middleware.CorsMiddleware',           # <= suba o CORS
    'django.middleware.common.CommonMiddleware',

    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# === CORS (dev) ===
CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = 'taskfy.urls'

# === Templates ===
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # templates globais
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'taskfy.wsgi.application'

# === Banco de Dados ===
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'taskfy',
        'USER': 'postgres',
        'PASSWORD': 'Mabu@2030!',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# === Password validators ===
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

# === i18n ===
LANGUAGE_CODE = 'pt-br'
TIME_ZONE = 'America/Sao_Paulo'
USE_I18N = True
USE_TZ = True

# === Static ===
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# === Media / Backups de PDF ===
# OBS: você já usa jobcard_backups como MEDIA_ROOT. Mantive para não quebrar rotas existentes.
MEDIA_URL = '/jobcard_backups/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'jobcard_backups')

# Compatibilidade com código legado
JOB_BACKUP_DIR = os.path.join(BASE_DIR, 'jobcard_backups')
os.makedirs(JOB_BACKUP_DIR, exist_ok=True)

# === Pastas auxiliares usadas pelo diagnóstico e geração de PDF ===
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
PDF_TEMP_DIR = os.path.join(BASE_DIR, 'tmp')  # temp para headers/footers HTML etc.
BARCODES_DIR = os.path.join(BASE_DIR, 'static', 'barcodes')
BACKUPS_DIR = JOB_BACKUP_DIR  # mesma pasta dos backups

for _p in (LOGS_DIR, PDF_TEMP_DIR, BARCODES_DIR, BACKUPS_DIR):
    os.makedirs(_p, exist_ok=True)

# === Caminho do wkhtmltopdf (ajuste conforme sua instalação) ===
# Ex.: D:\taskfy\wkhtmltopdf\bin\wkhtmltopdf.exe
WKHTMLTOPDF_BIN = str((BASE_DIR / "wkhtmltopdf" / "bin" / "wkhtmltopdf.exe").resolve())

# === REST/JWT (mantido como estava) ===
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=3650),  # 10 anos
    'REFRESH_TOKEN_LIFETIME': timedelta(days=3650),
}

# === Autodesk APS/Forge (mantido, mas recomendo mover para variáveis de ambiente) ===
APS_CLIENT_ID = os.environ.get('APS_CLIENT_ID', 'E4dLpBFkeIJHaH6uP1qkdNYu1CypSy059KF6Y2hj2T3IzTOz')
APS_CLIENT_SECRET = os.environ.get('APS_CLIENT_SECRET', 'IRAG1Dm7MPTMW3LfB7ano7FUdlWIWT9rbpjAdyGdugxeMaGAAGzG70j4AIZIw7n7')
APS_CALLBACK_URL = os.environ.get('APS_CALLBACK_URL', 'http://localhost:8080/api/auth/callback')

# === Default PK ===
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# === Logging (PDF) ===
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "pdf_file": {
            "class": "logging.FileHandler",
            "level": "INFO",
            "filename": os.path.join(LOGS_DIR, "rq_pdf_worker.log"),
            "encoding": "utf-8",
        },
        "console": {"class": "logging.StreamHandler", "level": "INFO"},
    },
    "loggers": {
        "pdf": {
            "handlers": ["pdf_file", "console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

